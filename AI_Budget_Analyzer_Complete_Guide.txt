AI BUDGET ANALYZER - COMPLETE SYSTEM GUIDE
==========================================

PROJECT OVERVIEW
================
The AI Budget Analyzer is a comprehensive budget management system that combines:
- AI-powered location-based cost analysis using Google Gemini API
- User profile management for consistent data entry
- SQLite database for session storage
- Tkinter GUI for easy interaction
- FastAPI backend for potential web integration

SYSTEM ARCHITECTURE
===================
├── Frontend: Tkinter GUI (gui_test.py)
├── Backend: FastAPI API (main.py)
├── Database: SQLite (database.py)
├── AI Integration: Google Gemini (gemini_client.py)
├── Data Models: Pydantic (models.py)
├── Configuration: Environment variables (config.py)
└── Documentation: UX guide (UX_Database_Documentation.txt)

SETUP REQUIREMENTS
==================
1. Python 3.8+ installed
2. Google Gemini API key
3. Required Python packages (see requirements.txt)

INSTALLATION STEPS
==================
1. Clone/download the project files
2. Install dependencies:
   pip install -r requirements.txt

3. Create .env file with your Gemini API key:
   GEMINI_API_KEY=your_api_key_here

4. Get API key from: https://makersuite.google.com/app/apikey

5. Run the GUI:
   python gui_test.py

6. (Optional) Run the API server:
   uvicorn main:app --reload

CORE FEATURES
=============

1. PROFILE MANAGEMENT
   - Create user profiles with personal defaults
   - Store constant data (utilities, debt, monthly payments)
   - Apply profiles to forms for quick data entry
   - Multiple profiles for different scenarios

2. AI-POWERED COST ANALYSIS
   - Location-based living cost estimates
   - Structured data extraction from AI responses
   - Integration with user profiles for personalized results
   - Direct save to database from AI analysis

3. MANUAL DATA ENTRY
   - Comprehensive budget input forms
   - Real-time calculations and totals
   - Load/save/edit session data
   - Automatic database cleanup (keeps 3 most recent sessions)

4. DATABASE MANAGEMENT
   - SQLite database with three tables:
     * users: User authentication
     * sessions: Budget session data
     * user_profiles: Profile management
   - Automatic session cleanup
   - Data validation and error handling

DATABASE SCHEMA
===============

USERS TABLE:
- id: Primary key
- username: Unique username
- password_hash: Hashed password
- email: User email
- created_at: Account creation timestamp
- last_login: Last login timestamp

SESSIONS TABLE:
- id: Primary key
- session_id: Unique session identifier
- user_id: Foreign key to users table
- user_data: JSON data containing household budget information
- budget_analysis: AI-generated budget analysis
- app_recommendations: AI app recommendations
- created_at: Session creation timestamp
- updated_at: Last update timestamp

USER_PROFILES TABLE:
- id: Primary key
- profile_id: Unique profile identifier
- profile_name: Human-readable profile name
- profile_data: JSON data containing profile information
- created_at: Profile creation timestamp
- updated_at: Last update timestamp

DATA STRUCTURES
===============

HOUSEHOLD DATA MODEL:
- Personal Information: name, age, location
- Household Details: household_size, bedrooms, bathrooms
- Housing Costs: rent, utilities (water, electricity, phone, other)
- Living Expenses: monthly_income, groceries, savings
- Debt Information: total_debt, monthly_payment, debt_type, interest_rate
- Monthly Payments: Up to 4 customizable payments
- Calculated Fields: totals, savings rate, debt-to-income ratio

UTILITIES DATA MODEL:
- water: Monthly water/sewer cost
- electricity: Monthly electricity/gas cost
- phone: Monthly phone/internet cost
- other: Other utility costs
- total: Calculated total utilities

DEBT DATA MODEL:
- total_debt: Total debt amount
- monthly_payment: Monthly debt payment
- debt_type: Type of debt (student loan, credit card, etc.)
- interest_rate: Interest rate percentage

MONTHLY PAYMENT MODEL:
- name: Payment description
- amount: Monthly payment amount
- category: Payment category (optional)
- is_essential: Whether payment is essential

USER PROFILE MODEL:
- profile_name: Name of the profile
- Personal Information: name, age, location
- Household Details: household_size, bedrooms, bathrooms
- Default Financial Settings: utilities, debt, monthly payments
- Preferences: preferred_savings_rate
- Timestamps: created_at, updated_at

GUI TABS AND FUNCTIONALITY
==========================

1. INPUT DATA TAB:
   - Personal information entry
   - Household details
   - Financial information (income, rent, utilities, debt)
   - Monthly payments (4 customizable slots)
   - Real-time calculations and totals
   - Save/load/update session data
   - Clear form functionality

2. DATABASE VIEW TAB:
   - View all saved sessions
   - Session details and timestamps
   - Load sessions back into form for editing
   - Clear all sessions functionality
   - Auto-refresh after operations

3. AI TEST TAB:
   - Location-based cost analysis
   - AI prompt testing
   - Structured data extraction
   - Create and save AI-generated profiles
   - Preview data structure before saving
   - Integration with user profiles

4. PROFILE MANAGEMENT TAB:
   - Create new user profiles
   - Load existing profiles
   - Edit profile information
   - Apply profiles to main form
   - Delete profiles
   - Profile selection and management

API ENDPOINTS (FastAPI)
=======================
- GET /health: Health check
- GET /sessions: Get recent sessions
- POST /sessions: Create new session
- PUT /sessions/{session_id}: Update session
- DELETE /sessions/{session_id}: Delete session
- POST /analyze-budget: AI budget analysis
- POST /recommend-apps: AI app recommendations

AI INTEGRATION
==============
- Google Gemini API integration
- Structured prompts for cost analysis
- Data extraction using regex patterns
- Profile-aware AI responses
- Error handling and fallbacks

CALCULATED FIELDS
=================
- total_monthly_expenses: Sum of all monthly costs
- total_yearly_expenses: Monthly expenses × 12
- total_yearly_income: Monthly income × 12
- monthly_savings_potential: Income - expenses
- yearly_savings_potential: Monthly savings × 12
- savings_rate: (Savings / Income) × 100
- debt_to_income_ratio: (Debt payment / Income) × 100

USAGE WORKFLOWS
===============

WORKFLOW 1: Creating and Using Profiles
1. Go to Profile Management tab
2. Click "Create New Profile"
3. Fill in your personal defaults
4. Save the profile
5. Use "Apply to Form" to populate main form
6. Adjust variable costs as needed
7. Save session

WORKFLOW 2: AI-Powered Location Analysis
1. Go to AI Test tab
2. Enter location and household size
3. Click "Get Average Living Costs"
4. Review AI-generated cost estimates
5. Click "Create & Save Complete Profile" to save
6. Or click "Apply to Form" to edit manually

WORKFLOW 3: Manual Budget Entry
1. Go to Input Data tab
2. Fill in all budget information
3. Review calculated totals
4. Save session
5. Use "Load from Database" to edit later

WORKFLOW 4: Session Management
1. Go to Database View tab
2. View all saved sessions
3. Click "Load from Database" to edit
4. Make changes and save updates
5. Use "Clear Database" to remove all sessions

ERROR HANDLING
==============
- Input validation for all numeric fields
- Database connection error handling
- AI API error handling with fallbacks
- File permission error handling
- User-friendly error messages

SECURITY FEATURES
=================
- Password hashing for user authentication
- Environment variable for API key storage
- SQL injection prevention with parameterized queries
- Input sanitization and validation

PERFORMANCE OPTIMIZATIONS
=========================
- Database indexing for faster queries
- Automatic session cleanup (3 session limit)
- Efficient data serialization with Pydantic
- Lazy loading of AI responses

TROUBLESHOOTING
===============

COMMON ISSUES:
1. "GEMINI_API_KEY is not set"
   - Check .env file exists and contains correct API key
   - Verify API key is valid and active

2. "Module not found" errors
   - Run: pip install -r requirements.txt
   - Ensure Python 3.8+ is installed

3. Database errors
   - Delete budget_app.db to reset database
   - Check file permissions

4. GUI not responding
   - Check for background processes
   - Restart the application

DEVELOPMENT NOTES
=================
- Code is organized with clear separation of concerns
- Database operations are centralized in database.py
- AI integration is isolated in gemini_client.py
- GUI logic is contained in gui_test.py
- Models are defined in models.py for data validation

FUTURE ENHANCEMENTS
===================
- Web interface using FastAPI
- User authentication system
- Data export/import functionality
- Advanced AI analysis features
- Mobile app integration
- Multi-user support

TEAM COLLABORATION
==================
- All code is well-documented
- Database schema is clearly defined
- API endpoints are RESTful
- Error handling is comprehensive
- Code follows Python best practices

SUPPORT AND MAINTENANCE
=======================
- Regular database backups recommended
- Monitor API usage for Gemini API
- Update dependencies regularly
- Test new features thoroughly
- Document any custom modifications

CONTACT AND RESOURCES
=====================
- Google Gemini API: https://makersuite.google.com/app/apikey
- FastAPI Documentation: https://fastapi.tiangolo.com/
- SQLite Documentation: https://www.sqlite.org/docs.html
- Tkinter Documentation: https://docs.python.org/3/library/tkinter.html

This system provides a complete budget analysis solution with AI integration,
user profile management, and comprehensive data handling capabilities.
